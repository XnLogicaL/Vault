{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This page is the official documentation for Vault, the superset of OpenInventory made by @XnLogicaL.</p>"},{"location":"#what-is-vault","title":"What is Vault?","text":"<p>Vault is a strictly typed object-oriented open-source library that can be used for ANY type of inventory system in your Roblox game. Vault inherits many features present in OpenInventory, and even adds more.</p>"},{"location":"#why-vault","title":"Why Vault?","text":"<p>Vault is NOT a complete inventory system, instead it aims to be the back bone of one.  It only consists of a back-end, which is has a very powerful API.</p>"},{"location":"installation/","title":"Workflow","text":"<p>Vault features full intellisense support on all platforms. That essentially means that you can use any IDE (Integrated Development Environment) of your choice</p>"},{"location":"installation/#recommended-ides","title":"Recommended IDEs","text":"<ul> <li>Roblox Studio IDE</li> <li>VSCode</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#from-github","title":"From Github","text":"<p>To get started with installing Vault via GitHub, check if you have Git installed by executing this command in your terminal:</p> Windows <pre><code>git --version\n</code></pre> <p>After you've confirmed that you have Git installed, go ahead and clone the repository by executing this command in your terminal:</p> Windows <pre><code>git clone https://github.com/XnLogicaL/Vault/tree/example-project\n</code></pre>"},{"location":"installation/#from-roblox","title":"From Roblox","text":"<p>To install Vault from the Roblox Library, go to Vault - Roblox Library and you'll have 2 options;</p>"},{"location":"installation/#1-get-the-model","title":"1 - Get the model","text":"<ul> <li>If you chose this option, once you've clicked the \"Get Model\" button, open studio and navigate to the toolbox. After that go to the \"My Models\" section and insert the model</li> </ul>"},{"location":"installation/#2-download-the-model","title":"2 - Download the model","text":"<ul> <li>If you chose this option, once you've downloaded the model, open it in your file explorer and drag it into studio.</li> </ul>"},{"location":"inventory/","title":"InventoryInstance","text":"<p>The structure that the inventory stores item data:</p> <pre><code>contents: {\n    [*name]: {\n        [*id]: *meta or {};\n    }\n}\n</code></pre> <p>Variables with an aterisk (*) represent a certain property of an item (respectfully)</p> <pre><code>name = Name\nid = Universally Unique Identifier\nmeta = Meta Data\n\n-----------------------------------\n\n* Getting the quantity of an item:\n    `#contents[*name]`\n\n* Getting the metadata of an item:\n    `contents[*name][*id]`\n\n* Getting the size of the inventory.\n    `#contents`\n</code></pre>"},{"location":"inventory/#properties","title":"Properties","text":""},{"location":"inventory/#itemadded","title":"ItemAdded","text":"<pre><code>InventoryInstance.ItemAdded&lt;InventoryItem&gt;\n</code></pre> <p>An RBXScriptSignal replica that gets fired every time <code>Inventory:AddItem(item)</code> is used.</p> <p>Fires attached with the item that is being added to the inventory.</p>"},{"location":"inventory/#itemremoving","title":"ItemRemoving","text":"<pre><code>InventoryInstance.ItemRemoving&lt;InventoryItem&gt;\n</code></pre> <p>An RBXScriptSignal replica that gets fired every time <code>Inventory:RemoveItem(...)</code> is used.</p> <p>Fires attached with the item that is being removed from the inventory.</p>"},{"location":"inventory/#destroying","title":"Destroying","text":"<pre><code>InventoryInstance.Destroying\n</code></pre> <p>An RBXScriptSignal replica that gets fired when the destructor method <code>Inventory:Destroy()</code> is called.</p>"},{"location":"inventory/#methods","title":"Methods","text":""},{"location":"inventory/#link","title":"Link","text":"<pre><code>InventoryInstance:Link(\n    player: Player\n) -&gt; ()\n</code></pre> <p>Links the inventory to the given player ONLY if the player does not have a linked inventory already.</p> <p>This method serves the purpose of making the inventory more unique and abstract.</p>"},{"location":"inventory/#getlinked","title":"GetLinked","text":"<pre><code>InventoryInstance:GetLinked() -&gt; Player?\n</code></pre> <p>Returns the linked player if there is one.</p>"},{"location":"inventory/#setsize","title":"SetSize","text":"<pre><code>InventoryInstance:SetSize(\n    size: int\n) -&gt; ()\n</code></pre> <p>Sets the maximum number of items that can simultaneously be present inside the contents of an inventory.</p>"},{"location":"inventory/#getsize","title":"GetSize","text":"<pre><code>InventoryInstance:GetSize() -&gt; int\n</code></pre> <p>Returns the maximum number of items that can simultaneously be present inside the contents of an inventory.</p>"},{"location":"inventory/#getid","title":"GetId","text":"<pre><code>InventoryInstance:GetId() -&gt; string\n</code></pre> <p>Returns the universeally unique id of the InventoryInstance.</p>"},{"location":"inventory/#islocked","title":"IsLocked","text":"<pre><code>InventoryInstance:IsLocked() -&gt; bool\n</code></pre> <p>Returns if wether or not the private property of <code>Inventory._locked</code> is true.</p> <p>Note</p> <p>If locked, an inventory essentially becomes uneditable unless unlocked.</p>"},{"location":"inventory/#setlocked","title":"SetLocked","text":"<pre><code>InventoryInstance:SetLocked(\n    locked: bool\n) -&gt; ()\n</code></pre> <p>Sets the private <code>Inventory._locked</code> property to the given value.</p>"},{"location":"inventory/#isfull","title":"IsFull","text":"<pre><code>InventoryInstance:IsFull() -&gt; bool\n</code></pre> <p>Surveys the inventory to return if wether or not it's full.</p>"},{"location":"inventory/#isempty","title":"IsEmpty","text":"<pre><code>InventoryInstance:IsEmpty() -&gt; bool\n</code></pre> <p>Surveys the inventory to return if wether or not it's completely empty.</p>"},{"location":"inventory/#retrieveitemnames","title":"RetrieveItemNames","text":"<pre><code>InventoryInstance:RetrieveItemNames() -&gt; {string?}\n</code></pre> <p>Internal method used to retrieve the names of every present item inside the contents of the inventory.</p> <p><code>O(n)</code> operation.</p>"},{"location":"inventory/#retrieveitemids","title":"RetrieveItemIds","text":"<pre><code>InventoryInstance:RetrieveItemIds() -&gt; {string?}\n</code></pre> <p>Internal method used to retrieve the Ids of every present item inside the contents of the inventory.</p> <p><code>O(n)</code> operation.</p>"},{"location":"inventory/#reconcile","title":"Reconcile","text":"<pre><code>InventoryInstance:Reconcile() -&gt; ()\n</code></pre> <p>Safety method that checks for item overflow (# of items being larger than the maximum capacity) and corrects it.</p> <p>Starts deleting from the bottom of the contents until the overflow is fixed.</p>"},{"location":"inventory/#getmetadata","title":"GetMetaData","text":"<pre><code>InventoryInstance:GetMetaData() -&gt; {any?}\n</code></pre> <p>Returns the meta data that is attached to the table.</p>"},{"location":"inventory/#setmetadata","title":"SetMetaData","text":"<pre><code>InventoryInstance:SetMetaData(\n    data: {any?}\n) -&gt; ()\n</code></pre> <p>Sets the attached meta data to the given value.</p>"},{"location":"inventory/#removecontents","title":"RemoveContents","text":"<pre><code>InventoryInstance:RemoveContents() -&gt; ()\n</code></pre> <p>Irreversible operation that wipes the contents of the inventory.</p>"},{"location":"inventory/#getitembyid","title":"GetItemById","text":"<pre><code>InventoryInstance:GetItemById(\n    id: string\n) -&gt; InventoryItem?\n</code></pre> <p>Internal method used to fetch an item using it's id.</p>"},{"location":"inventory/#getfirstitembyname","title":"GetFirstItemByName","text":"<pre><code>InventoryInstance:GetFirstItemByName(\n    name: string\n) -&gt; InventoryItem?\n</code></pre> <p>Internal method that fetches the first item with give name.</p>"},{"location":"inventory/#hasitem","title":"HasItem","text":"<pre><code>InventoryInstance:HasItem(\n    item: InventoryItem\n) -&gt; bool\n</code></pre> <p>Returns true if the given item is present inside the inventory.</p>"},{"location":"inventory/#hasitemwithid","title":"HasItemWithId","text":"<pre><code>InventoryInstance:HasItemWithId(\n    id: string\n) -&gt; bool\n</code></pre> <p>Returns true if an item with an id equievelant to the given id is present inside the inventory.</p>"},{"location":"inventory/#hasitemwithname","title":"HasItemWithName","text":"<pre><code>InventoryInstance:HasItemWithName(\n    name: string\n) -&gt; bool\n</code></pre> <p>Returns true if at least 1 item with the given name is present inside the inventory.</p>"},{"location":"usage/","title":"Basic Usage","text":"<p>Once you've installed Vault using your preffered method, we can actually get started with using Vault.</p> <p>Warning</p> <p>This article asumes familiarity with Lua and/or Luau.</p>"},{"location":"usage/#requiring","title":"Requiring","text":"<p>Once you have setup your workspace/file system, go ahead and create a Server script. In this script, require Vault using the <code>require()</code> function as shown below:</p> <pre><code>-- example.lua\nlocal Vault = require(path.to.Vault)\n</code></pre>"},{"location":"usage/#creating-a-basic-system","title":"Creating a Basic System","text":"<p>After you've completed the previous step, now we can actually start implementing some features. Start with creating a function that is intended to be called once a player joins:</p> <pre><code>-- example.lua\nlocal Vault = require(path.to.Vault)\n\nlocal function onPlayerAdded(player: Player)\n    local playerInventory = Vault.new()\n    playerInventory:Link(player)\nend\n</code></pre> <p>The <code>:Link()</code> function is another way to make the inventory universally unique, as each player can only have a single attached inventory.</p> <p>Next step is to actually connect the function to the <code>.PlayerAdded</code> event, so let's do it!</p> <pre><code>-- example.lua\nlocal Players = game:GetService(\"Players\")\n\nlocal Vault = require(path.to.Vault)\n\nlocal function onPlayerAdded(player: Player)\n    local playerInventory = Vault.new()\n    playerInventory:Link(player)\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n</code></pre> <p>Now that out of the way, we can do some customizing. Let's say we want the default inventory size to be 20, we can do that by utilizing the <code>:SetSize(value)</code> function.</p> <p>Additionally, we can attach meta data to an inventory, by using the <code>:SetMetaData(data)</code> function.</p> <pre><code>-- example.lua\nlocal Players = game:GetService(\"Players\")\n\nlocal Vault = require(path.to.Vault)\n\nlocal function onPlayerAdded(player: Player)\n    local playerInventory = Vault.new()\n    playerInventory:Link(player)\n    playerInventory:SetSize(20)\n    playerInventory:SetMetaData({\n        foo = \"bar\"\n    })\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n</code></pre>"},{"location":"usage/#items","title":"Items","text":"<p>Doing great so far! Now we'll look into the concept of an item object, which is basically a table with 3 properties:</p> <ul> <li>Meta Data</li> <li>Item Name</li> <li>Item ID</li> </ul> <p>When using the built-in constructor, Item ID is automatically generated, whilst the other 2 properties can be customized.</p> <p>Note</p> <p>The <code>name</code> property of an item is what classifies it inside the inventory index.</p>"},{"location":"usage/#creating-an-item","title":"Creating an Item","text":"<p>First, we'll need to include a reference to the Item object constructor. We can do that by reading the <code>Vault.Item</code> property.</p> <pre><code>-- example.lua\nlocal Players = game:GetService(\"Players\")\n\nlocal Vault = require(path.to.Vault)\nlocal Item = Vault.Item\n\nlocal function onPlayerAdded(player: Player)\n    local playerInventory = Vault.new()\n    playerInventory:Link(player)\n    playerInventory:SetSize(20)\n    playerInventory:SetMetaData({\n        foo = \"bar\"\n    })\n\n    local myItem = Item.new({\n        name = \"myItem\";\n        meta = {};\n    })\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n</code></pre> <p>Now we can use the <code>:AddItem(item)</code> and <code>:RemoveItem(bool, query)</code> methods to manage the inventory.</p> <p>Note</p> <p>The <code>:RemoveItem()</code> function takes in 2 arguments, first one is a boolean which determines if the removal will be conducted by ItemId or by ItemName. The query argument represents the input required in each scenario.</p> <p>We can implement this by providing the item we created to the <code>:AddItem()</code> function</p> <pre><code>-- example.lua\nlocal Players = game:GetService(\"Players\")\n\nlocal Vault = require(path.to.Vault)\nlocal Item = Vault.Item\n\nlocal function onPlayerAdded(player: Player)\n    local playerInventory = Vault.new()\n    playerInventory:Link(player)\n    playerInventory:SetSize(20)\n    playerInventory:SetMetaData({\n        foo = \"bar\"\n    })\n\n    local myItem = Item.new({\n        name = \"myItem\";\n        meta = {\n            \"myMetaData\"\n        };\n    })\n\n    playerInventory:AddItem(myItem)\n\n    print(playerInventory:GetContents())\nend\n\nPlayers.PlayerAdded:Connect(onPlayerAdded)\n</code></pre> Output <pre><code>{\n    [\"myItem\"] = {\n        [\"${__ItemId__}\"] = { \"myMetaData\" }\n    }\n}\n</code></pre> <p>This tutorial was to show off the basic features of Vault, the code provided is not intended to be used in production.</p>"},{"location":"vault/","title":"API Reference","text":"<p>This page references the root namespace.</p>"},{"location":"vault/#properties","title":"Properties","text":""},{"location":"vault/#registry","title":"Registry","text":"<pre><code>Vault.Registry\n</code></pre> <p>Registry object containing essential methods for registering objects.  Further documentation can be found here</p>"},{"location":"vault/#items","title":"Items","text":"<pre><code>Vault.Items \n</code></pre> <p>Items object containing a constructor method for creating items</p>"},{"location":"vault/#types","title":"Types","text":"<pre><code>Vault.Types\n</code></pre> <p>A filler module containing types that are used throughout Vault.  Further documentation can be found here</p>"},{"location":"vault/#methods","title":"Methods","text":""},{"location":"vault/#new","title":"new","text":"<pre><code>Vault.new(\n    _size?: int,\n    _contents?: {Item},\n    _meta?: {any?}\n) -&gt; InventoryInstance\n</code></pre> <p>Constructs a new InventoryInstance with or without the parameters.</p> <p>The given inventory object will be, no matter what, universally unique.</p>"},{"location":"vault/#is","title":"Is","text":"<pre><code>Vault.Is(\n    object: any\n) -&gt; boolean\n</code></pre> <p>Checks if the given object is a valid InventoryInstance.</p>"},{"location":"vault/#decodeandwrap","title":"DecodeAndWrap","text":"<pre><code>Vault:DecodeAndWrap(\n    obj: string\n) -&gt; InventoryInstance\n</code></pre> <p>Returns a new InventoryInstance with a name and meta data inherited from the encoded input and a unique id.</p> <p>Is the inverse function of <code>Vault:Encode(InventoryInstance)</code>.</p>"},{"location":"vault/#encode","title":"Encode","text":"<pre><code>Vault:Encode(\n    obj: InventoryInstance\n) -&gt; string\n</code></pre> <p>Encodes the input InventoryInstance into a packed string with unique data that can be decoded.</p>"}]}